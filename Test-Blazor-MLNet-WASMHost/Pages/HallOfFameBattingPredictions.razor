@page "/HallOfFameBattingPredictions"
@inject IJSRuntime JSRuntime

<link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />

<strong class="form-text">Local prediction inference in Blazor and ML.NET</strong>
<small class="form-text text-muted"><b>Select </b>the algorithm used in the ML.NET model for prediction:</small>
<small class="form-text text-muted"><b>Note: </b>Models that do not return probability values (only labels) will show value as N/A</small>
<select id="algorithmName" @onchange="OnSelectedAlgorithm" class="dropDown">
    <option value="AveragedPerceptron">AveragedPerceptron</option>
    <option value="FastForest">FastForest</option>
    <option value="FastTree">FastTree</option>
    <option value="GeneralizedAdditiveModels">GeneralizedAdditiveModels</option>
    <option selected value="LightGbm">LightGbm</option>
    <option value="LogisticRegression">LogisticRegression</option>
    <option value="StackedEnsemble">Stacked Ensemble</option>
    <option value="StochasticGradientDescentCalibrated">StochasticGradientDescentCalibrated</option>
    <option value="StochasticGradientDescentNonCalibrated">StochasticGradientDescentNonCalibrated</option>
</select>

<small class="form-text text-muted"><b>Select or Search</b> any MLB Batter to perform prediction:</small>
<BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                   @bind-Value="@SelectedBatter"
                   Debounce="150" MaximumSuggestions="50"
                   EnableDropDown="true" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </SelectedTemplate>
    <ResultTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any baseball players found.
    </NotFoundTemplate>
</BlazoredTypeahead>

<br />
<div class="card" style="min-height: 0px;">
    <div class="containerHeader">
        <div class="fixedHeader">
            <button class="showMeButton" @onclick="ChangeButtonAppearance">
                @button
            </button>
        </div>
        <span class="verticalHeader">Prediction Tables</span>
    </div>
    <div class="@cardDetailsStyle">
        <div class="g-predictionTable">
            <h5>Hall of Fame - On Ballot</h5>
            <table>
                <thead>
                    <tr>
                        <th>Year Played</th>
                        <th>Probability</th>
                        <th>Class Label</th>
                    </tr>
                </thead>
                @foreach (var pred in this.predictionData.MLBBaseballBatterSeasonPredictions)
                {
                    <tr class=@(pred.OnHallOfFameBallotPrediction ? "g-prediction-row" : string.Empty)>
                        <td class="g-seasonNumber">@pred.SeasonNumber</td>
                        <td>@pred.OnHallOfFameBallotProbabilityLabel</td>
                        <td class="g-prediction"><div class=@(pred.OnHallOfFameBallotPrediction ? "g-prediction-true" : string.Empty)>@pred.OnHallOfFameBallotPrediction</div></td>
                    </tr>
                }
            </table>
        </div>
        <div class="g-predictionTable">
            <h5>Hall of Fame - Induction</h5>
            <table>
                <thead>
                    <tr>
                        <th>Year Played</th>
                        <th>Probability</th>
                        <th>Class Label</th>
                    </tr>
                </thead>
                @foreach (var pred in this.predictionData.MLBBaseballBatterSeasonPredictions)
                {
                    <tr class=@(pred.InductedToHallOfFamePrediction ? "g-prediction-row" : string.Empty)>
                        <td class="g-seasonNumber">@pred.SeasonNumber</td>
                        <td>@pred.InductedToHallOfFameProbabilityLabel</td>
                        <td class="g-prediction"><div class=@(pred.InductedToHallOfFamePrediction ? "g-prediction-true" : string.Empty)>@pred.InductedToHallOfFamePrediction</div></td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>
<br />
<div class="card" style="min-height: 0px;">
    <div class="containerHeader">
        <div class="fixedHeader">
            <button class="showMeButton" @onclick="ChangeChartButtonAppearance">
                @buttonChart
            </button>
        </div>
        <span class="verticalHeader">Prediction Chart</span>
    </div>
    <div class="@cardDetailsChartStyle">
        <div class="g-predictionChart">
            <h5>Predictions - Historical Seasons</h5>
            <!-- Create a div where the graph will take place -->
            <div id="my_dataviz" class="svg-container">
            </div>
        </div>
    </div>
</div>


@code {

    // Variables
    private string cardDetailsStyle = "card-details-visible";
    private string cardDetailsChartStyle = "card-details-visible";
    private string button = "[ - ]";
    private string buttonChart = "[ - ]";

    public List<MLBBaseballBatter> batters = new List<MLBBaseballBatter>(27000);
    public List<MLBBaseballBatter> battersLastYear;
    public PredictionData predictionData;
    private MLBBaseballBatter _selectedBatter;
    private string selectedAlgorithm = "LightGbm"; //default
    private string[] predictionTypes = { "InductedToHallOfFame", "OnHallOfFameBallot" };

    public MLBBaseballBatter SelectedBatter
    {
        get { return _selectedBatter; }
        set
        {
            if (value != null)
            {
                _selectedBatter = value;
                Console.WriteLine("Selected Batter: " + _selectedBatter.FullPlayerName);
                this.PerformPrediction();
            }
        }
    }

    protected override void OnInitialized()
    {
        // Build baseball batters list

        batters = BaseballDataSampleService.Instance.SampleBaseBallData;

        this.battersLastYear = batters
          .OrderByDescending(a => a.YearsPlayed)
          .GroupBy(a => a.ID)
          .Select(g => g.First()).ToList();

        this.SelectedBatter = battersLastYear.Where(a => a.FullPlayerName == MLBBaseballBatter.GetDefaultBatter()).FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    void OnSelectedAlgorithm(ChangeEventArgs e)
    {
        this.selectedAlgorithm = e.Value.ToString();
        Console.WriteLine("Selected Algorithm: " + selectedAlgorithm);

        this.PerformPrediction();
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        return await Task.FromResult(battersLastYear.Where(x => x.FullPlayerName.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void ChangeButtonAppearance(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsStyle = (cardDetailsStyle == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        button = (button == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void ChangeChartButtonAppearance(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsChartStyle = (cardDetailsChartStyle == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        buttonChart = (buttonChart == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void PerformPrediction()
    {
        var selectedBatterSeasons = batters.Where(b => b.ID == this.SelectedBatter.ID).ToList();
        this.predictionData = Util.GetMLBBaseballBatterSeasonPredictions(selectedAlgorithm, SelectedBatter, selectedBatterSeasons);
    }

    private async Task RenderChart()
    {
        if (this.predictionData.ChartData == null)
        {
            this.PerformPrediction();
        }

        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.predictionData.ChartData, this.predictionData.ChartDataMinMax, selectedAlgorithm);
    }
}